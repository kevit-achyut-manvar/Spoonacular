// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SpoonacularAPI.ViewModels;
//
//    var randomRecipeInformation = RandomRecipeInformation.FromJson(jsonString);
using Newtonsoft.Json;

namespace SpoonacularAPI.ViewModels
{
    public partial class RandomRecipeInformation
    {
        [JsonProperty("recipes")]
        public List<Recipe> Recipes { get; set; }
    }

    public partial class Recipe
    {
        [JsonProperty("vegetarian")]
        public bool Vegetarian { get; set; }

        [JsonProperty("vegan")]
        public bool Vegan { get; set; }

        [JsonProperty("glutenFree")]
        public bool GlutenFree { get; set; }

        [JsonProperty("dairyFree")]
        public bool DairyFree { get; set; }

        [JsonProperty("veryHealthy")]
        public bool VeryHealthy { get; set; }

        [JsonProperty("cheap")]
        public bool Cheap { get; set; }

        [JsonProperty("veryPopular")]
        public bool VeryPopular { get; set; }

        [JsonProperty("sustainable")]
        public bool Sustainable { get; set; }

        [JsonProperty("lowFodmap")]
        public bool LowFodmap { get; set; }

        [JsonProperty("weightWatcherSmartPoints")]
        public long WeightWatcherSmartPoints { get; set; }

        [JsonProperty("gaps")]
        public string Gaps { get; set; }

        [JsonProperty("preparationMinutes")]
        public long PreparationMinutes { get; set; }

        [JsonProperty("cookingMinutes")]
        public long CookingMinutes { get; set; }

        [JsonProperty("aggregateLikes")]
        public long AggregateLikes { get; set; }

        [JsonProperty("healthScore")]
        public long HealthScore { get; set; }

        [JsonProperty("creditsText")]
        public string CreditsText { get; set; }

        [JsonProperty("license")]
        public string License { get; set; }

        [JsonProperty("sourceName")]
        public string SourceName { get; set; }

        [JsonProperty("pricePerServing")]
        public double PricePerServing { get; set; }

        [JsonProperty("extendedIngredients")]
        public List<ExtendedIngredient> ExtendedIngredients { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("readyInMinutes")]
        public long ReadyInMinutes { get; set; }

        [JsonProperty("servings")]
        public long Servings { get; set; }

        [JsonProperty("sourceUrl")]
        public Uri SourceUrl { get; set; }

        [JsonProperty("openLicense")]
        public long OpenLicense { get; set; }

        [JsonProperty("image")]
        public Uri Image { get; set; }

        [JsonProperty("imageType")]
        public string ImageType { get; set; }

        [JsonProperty("summary")]
        public string Summary { get; set; }

        [JsonProperty("cuisines")]
        public List<string> Cuisines { get; set; }

        [JsonProperty("dishTypes")]
        public List<string> DishTypes { get; set; }

        [JsonProperty("diets")]
        public List<string> Diets { get; set; }

        [JsonProperty("occasions")]
        public List<object> Occasions { get; set; }

        [JsonProperty("instructions")]
        public string Instructions { get; set; }

        [JsonProperty("analyzedInstructions")]
        public List<AnalyzedInstruction> AnalyzedInstructions { get; set; }

        [JsonProperty("originalId")]
        public object OriginalId { get; set; }

        [JsonProperty("spoonacularSourceUrl")]
        public Uri SpoonacularSourceUrl { get; set; }
    }

    public partial class ExtendedIngredient
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("aisle")]
        public string Aisle { get; set; }

        [JsonProperty("image")]
        public string Image { get; set; }

        [JsonProperty("consistency")]
        public Consistency Consistency { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("nameClean")]
        public string NameClean { get; set; }

        [JsonProperty("original")]
        public string Original { get; set; }

        [JsonProperty("originalName")]
        public string OriginalName { get; set; }

        [JsonProperty("amount")]
        public double Amount { get; set; }

        [JsonProperty("unit")]
        public string Unit { get; set; }

        [JsonProperty("meta")]
        public List<string> Meta { get; set; }

        [JsonProperty("measures")]
        public Measures Measures { get; set; }
    }

    public partial class Measures
    {
        [JsonProperty("us")]
        public Metric Us { get; set; }

        [JsonProperty("metric")]
        public Metric Metric { get; set; }
    }

    public partial class Metric
    {
        [JsonProperty("amount")]
        public double Amount { get; set; }

        [JsonProperty("unitShort")]
        public string UnitShort { get; set; }

        [JsonProperty("unitLong")]
        public string UnitLong { get; set; }
    }

    public enum Consistency { Liquid, Solid };

    internal class ConsistencyConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Consistency) || t == typeof(Consistency?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "LIQUID":
                    return Consistency.Liquid;
                case "SOLID":
                    return Consistency.Solid;
            }
            throw new Exception("Cannot unmarshal type Consistency");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Consistency)untypedValue;
            switch (value)
            {
                case Consistency.Liquid:
                    serializer.Serialize(writer, "LIQUID");
                    return;
                case Consistency.Solid:
                    serializer.Serialize(writer, "SOLID");
                    return;
            }
            throw new Exception("Cannot marshal type Consistency");
        }

        public static readonly ConsistencyConverter Singleton = new ConsistencyConverter();
    }
}

